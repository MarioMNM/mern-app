{"version":3,"file":"static/js/99.af7950e4.chunk.js","mappings":"kRA2GA,UA1FiB,WACf,IAAMA,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GAExBC,GAAsDC,EAAAA,EAAAA,KAA9CC,EAASF,EAATE,UAAWC,EAAKH,EAALG,MAAOC,EAAWJ,EAAXI,YAAaC,EAAUL,EAAVK,WAEvCC,GAAkCC,EAAAA,EAAAA,GAChC,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,GAEXE,QAAS,CACPH,MAAO,GACPC,SAAS,GAEXG,MAAO,CACLJ,MAAO,KACPC,SAAS,KAGb,GACDI,GAAAC,EAAAA,EAAAA,GAAAT,EAAA,GApBMU,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAsBxBI,GAAWC,EAAAA,EAAAA,MAEXC,EAAkB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAK,IAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAOoB,OANzDL,EAAMM,iBAAiBH,EAAAC,KAAA,GAEfH,EAAW,IAAIM,UACZC,OAAO,QAASlB,EAAUmB,OAAO3B,MAAMC,OAChDkB,EAASO,OAAO,cAAelB,EAAUmB,OAAOxB,YAAYF,OAC5DkB,EAASO,OAAO,UAAWlB,EAAUmB,OAAOvB,QAAQH,OACpDkB,EAASO,OAAO,QAASlB,EAAUmB,OAAOtB,MAAMJ,OAAOoB,EAAAE,KAAA,EACjD3B,EAAY,GAADgC,OAAIC,wBAAgC,eAAe,OAAQV,EAAU,CACpFW,cAAe,UAAYzC,EAAK0C,QAC/B,KAAD,EACFrB,EAAS,KAAKW,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,kCAAAA,EAAAY,OAAA,GAAAhB,EAAA,mBAEjB,gBAbuBiB,GAAA,OAAArB,EAAAsB,MAAA,KAAAC,UAAA,KAexB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,SAAc,CAAAC,SAAA,EACbC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAC9C,MAAOA,EAAO+C,QAAS7C,KACnCwC,EAAAA,EAAAA,MAAA,QAAMM,UAAU,aAAaC,SAAUhC,EAAmB2B,SAAA,CACvD7C,IAAa8C,EAAAA,EAAAA,KAACK,EAAAA,EAAc,CAACC,WAAS,KACvCN,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CACJC,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,EAACC,EAAAA,EAAAA,OACbC,UAAU,8BACVC,QAAS9C,KAEX+B,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CACJC,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,EAACI,EAAAA,EAAAA,IAAoB,IACjCF,UAAU,4DACVC,QAAS9C,KAEX+B,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CACJC,GAAG,UACHC,QAAQ,QACRE,MAAM,UACNC,WAAY,EAACC,EAAAA,EAAAA,OACbC,UAAU,+BACVC,QAAS9C,KAEX+B,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CACVC,QAAM,EACNV,GAAG,QACHO,QAAS9C,EACT6C,UAAU,mCAEZd,EAAAA,EAAAA,KAAA,OAAKG,UAAU,SAAQJ,UACrBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAM,CAACT,KAAK,SAASU,UAAWpD,EAAUN,QAAQqC,SAAE,qBAO/D,C","sources":["places/pages/NewPlace.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport \"./PlaceForm.css\";\r\n\r\nconst NewPlace = () => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      address: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      image: {\r\n        value: null,\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const placeSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"title\", formState.inputs.title.value);\r\n      formData.append(\"description\", formState.inputs.description.value);\r\n      formData.append(\"address\", formState.inputs.address.value);\r\n      formData.append(\"image\", formState.inputs.image.value);\r\n      await sendRequest(`${process.env.REACT_APP_DOMAIN_URL}/api/places`, \"POST\", formData, {\r\n        Authorization: \"Bearer \" + auth.token,\r\n      });\r\n      navigate(\"/\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <Input\r\n          id=\"title\"\r\n          element=\"input\"\r\n          type=\"text\"\r\n          label=\"Title\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid title.\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"description\"\r\n          element=\"textarea\"\r\n          label=\"Description\"\r\n          validators={[VALIDATOR_MINLENGTH(5)]}\r\n          errorText=\"Please enter a valid description (at least 5 characters).\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"address\"\r\n          element=\"input\"\r\n          label=\"Address\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid adress.\"\r\n          onInput={inputHandler}\r\n        />\r\n        <ImageUpload\r\n          center\r\n          id=\"image\"\r\n          onInput={inputHandler}\r\n          errorText=\"Please provide a valid image.\"\r\n        />\r\n        <div className=\"center\">\r\n          <Button type=\"submit\" disabled={!formState.isValid} >\r\n            ADD PLACE\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewPlace;\r\n"],"names":["auth","useContext","AuthContext","_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useForm","useForm","title","value","isValid","description","address","image","_useForm2","_slicedToArray","formState","inputHandler","navigate","useNavigate","placeSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","formData","wrap","_context","prev","next","preventDefault","FormData","append","inputs","concat","process","Authorization","token","t0","stop","_x","apply","arguments","_jsxs","React","children","_jsx","ErrorModal","onClear","className","onSubmit","LoadingSpinner","asOverlay","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","ImageUpload","center","Button","disabled"],"sourceRoot":""}