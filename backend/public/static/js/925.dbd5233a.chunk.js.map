{"version":3,"file":"static/js/925.dbd5233a.chunk.js","mappings":"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","sources":["places/pages/UpdatePlace.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\n\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport \"./PlaceForm.css\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\n\r\nconst UpdatePlace = () => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedPlace, setLoadedPlace] = useState();\r\n  const placeId = useParams().placeId;\r\n  const auth = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    true\r\n  );\r\n\r\n  const placeUpdateSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_DOMAIN_URL}/api/places/${placeId}`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      navigate(\"/\" + auth.userId + \"/places\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetcPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_DOMAIN_URL}/api/places/${placeId}`\r\n        );\r\n\r\n        setLoadedPlace(responseData.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.place.title,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: responseData.place.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (err) {}\r\n    };\r\n    fetcPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!loadedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {!isLoading && loadedPlace && (\r\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            element=\"input\"\r\n            label=\"Title\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid title.\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedPlace.title}\r\n            initialValid={true}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textarea\"\r\n            label=\"Description\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText=\"Please enter a valid description (at least 5 characters).\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedPlace.description}\r\n            initialValid={true}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdatePlace;\r\n"],"names":["_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useState","useState","_useState2","_slicedToArray","loadedPlace","setLoadedPlace","placeId","useParams","auth","useContext","AuthContext","navigate","useNavigate","_useForm","useForm","title","value","isValid","description","_useForm2","formState","inputHandler","setFormData","placeUpdateSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","preventDefault","concat","process","JSON","stringify","inputs","Authorization","token","userId","t0","stop","_x","apply","arguments","useEffect","fetcPlace","_ref2","_callee2","responseData","_context2","sent","place","_jsx","className","children","LoadingSpinner","_jsxs","React","ErrorModal","onClear","onSubmit","Input","id","element","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","Button","type","disabled","Card"],"sourceRoot":""}